#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
CLIENTE MAT√çAS - VERSI√ìN CABA
===============================

Aplicaci√≥n de picking espec√≠fica para MUNDO CABA.

Configuraci√≥n:
- API Dragonfish: Servidor remoto en Bah√≠a Blanca (190.211.201.217:8009)
- Base de datos: DRAGONFISH_MUNDOCAB en DESKTOP-CK25NCF\ZOOLOGIC
- Filtros: CAB, CABA, MUNDOCAB

Autor: Sistema de Picking
Versi√≥n: CABA v1.0
"""

import sys
import os
import time
import traceback
from pathlib import Path

# CONFIGURACI√ìN CABA: Establecer variable de entorno para identificar versi√≥n
os.environ['CABA_VERSION'] = 'true'

# Agregar el directorio ra√≠z al path para imports
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# Importar configuraci√≥n espec√≠fica de CABA
import config_caba

def setup_logging():
    """Configura el sistema de logging para CABA."""
    import logging
    from utils.logger import get_logger
    
    # Configurar logging espec√≠fico para CABA
    log = get_logger("CABA_MAIN")
    log.info("=" * 60)
    log.info("üè¢ INICIANDO SISTEMA CABA")
    log.info("=" * 60)
    log.info(f"üì° API Dragonfish: {config_caba.DRAGONFISH_BASE_URL}")
    log.info(f"üóÑÔ∏è SQL Server: {config_caba.SQL_SERVER}")
    log.info(f"üìä Base de datos: {config_caba.DATABASE_NAME}")
    log.info(f"üè∑Ô∏è Keywords: {config_caba.KEYWORDS_NOTE_CABA}")
    log.info("=" * 60)
    
    return log

def test_dependencies():
    """Verifica que todas las dependencias est√©n disponibles."""
    log = setup_logging()
    
    try:
        # Test imports cr√≠ticos
        log.info("üîç Verificando dependencias...")
        
        import tkinter
        log.info("‚úÖ tkinter disponible")
        
        import ttkbootstrap
        log.info("‚úÖ ttkbootstrap disponible")
        
        import requests
        log.info("‚úÖ requests disponible")
        
        import pyodbc
        log.info("‚úÖ pyodbc disponible")
        
        from reportlab.lib.pagesizes import A4
        log.info("‚úÖ reportlab disponible")
        
        log.info("‚úÖ Todas las dependencias verificadas")
        return True
        
    except ImportError as e:
        log.error(f"‚ùå Dependencia faltante: {e}")
        return False
    except Exception as e:
        log.error(f"‚ùå Error verificando dependencias: {e}")
        return False

def test_connections():
    """Prueba las conexiones remotas."""
    log = setup_logging()
    
    try:
        log.info("üîß Probando conexiones remotas...")
        
        # Test API Dragonfish
        from api.dragonfish_api_caba import dragonfish_caba
        api_ok = dragonfish_caba.test_connection()
        
        if api_ok:
            log.info("‚úÖ Conexi√≥n API Dragonfish OK")
        else:
            log.warning("‚ö†Ô∏è Conexi√≥n API Dragonfish FALLO")
        
        # Test Base de datos
        from utils.db_caba import db_caba
        db_ok = db_caba.test_connection()
        
        if db_ok:
            log.info("‚úÖ Conexi√≥n Base de datos OK")
        else:
            log.warning("‚ö†Ô∏è Conexi√≥n Base de datos FALLO")
        
        return api_ok and db_ok
        
    except Exception as e:
        log.error(f"‚ùå Error probando conexiones: {e}")
        return False

def show_startup_info():
    """Muestra informaci√≥n de inicio en consola."""
    print("\n" + "=" * 60)
    print("üè¢ CLIENTE MAT√çAS - VERSI√ìN CABA")
    print("=" * 60)
    print(f"üì° API Dragonfish: {config_caba.DRAGONFISH_BASE_URL}")
    print(f"üóÑÔ∏è SQL Server: {config_caba.SQL_SERVER}")
    print(f"üìä Base de datos: {config_caba.DATABASE_NAME}")
    print(f"üè∑Ô∏è Filtros: {', '.join(config_caba.KEYWORDS_NOTE_CABA)}")
    print(f"üè™ Dep√≥sito: {config_caba.DEPOSITO_DISPLAY_NAME}")
    print("=" * 60)
    print("üöÄ Iniciando aplicaci√≥n...")
    print()

def main():
    """Funci√≥n principal para lanzar la aplicaci√≥n CABA."""
    try:
        # Mostrar informaci√≥n de inicio
        show_startup_info()
        
        # Verificar dependencias
        if not test_dependencies():
            print("‚ùå Error: Dependencias faltantes. Instale los paquetes requeridos.")
            input("Presione Enter para salir...")
            return 1
        
        # Probar conexiones (no bloqueante)
        connections_ok = test_connections()
        if not connections_ok:
            print("‚ö†Ô∏è Advertencia: Algunas conexiones remotas fallaron.")
            print("   La aplicaci√≥n iniciar√° pero algunas funciones pueden no funcionar.")
            print("   Verifique la conectividad de red y configuraci√≥n.")
        
        # Importar y lanzar GUI
        print("üé® Iniciando interfaz gr√°fica CABA...")
        from gui.app_gui_v3_caba import launch_gui_v3_caba
        
        # Lanzar aplicaci√≥n
        launch_gui_v3_caba()
        
        return 0
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Aplicaci√≥n interrumpida por el usuario")
        return 1
        
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        print("   Verifique que todos los archivos est√©n presentes.")
        traceback.print_exc()
        try:
            input("Presione Enter para salir...")
        except:
            time.sleep(5)  # Esperar 5 segundos si input() falla
        return 1
        
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        traceback.print_exc()
        try:
            input("Presione Enter para salir...")
        except:
            time.sleep(5)  # Esperar 5 segundos si input() falla
        return 1

def show_help():
    """Muestra ayuda de la aplicaci√≥n."""
    help_text = """
CLIENTE MAT√çAS - VERSI√ìN CABA
=============================

USO:
    python main_caba.py          - Iniciar aplicaci√≥n normal
    python main_caba.py --help   - Mostrar esta ayuda
    python main_caba.py --test   - Solo probar conexiones
    python main_caba.py --info   - Mostrar informaci√≥n de configuraci√≥n

CONFIGURACI√ìN CABA:
    ‚Ä¢ API Dragonfish: http://190.211.201.217:8009/api.Dragonfish
    ‚Ä¢ SQL Server: DESKTOP-CK25NCF\\ZOOLOGIC
    ‚Ä¢ Base de datos: DRAGONFISH_MUNDOCAB
    ‚Ä¢ Filtros: CAB, CABA, MUNDOCAB

REQUISITOS:
    ‚Ä¢ Python 3.8+
    ‚Ä¢ Conexi√≥n a internet (para API remota)
    ‚Ä¢ Acceso a red local (para SQL Server)
    ‚Ä¢ Dependencias: tkinter, ttkbootstrap, requests, pyodbc, reportlab

SOPORTE:
    Para problemas de configuraci√≥n o conectividad, contacte al administrador.
    """
    print(help_text)

if __name__ == "__main__":
    try:
        # Manejar argumentos de l√≠nea de comandos
        if len(sys.argv) > 1:
            arg = sys.argv[1].lower()
            
            if arg in ['--help', '-h', 'help']:
                show_help()
                sys.exit(0)
                
            elif arg in ['--test', '-t', 'test']:
                print("üîß Modo de prueba - Solo probando conexiones...")
                setup_logging()
                if test_connections():
                    print("‚úÖ Todas las conexiones OK")
                    sys.exit(0)
                else:
                    print("‚ùå Algunas conexiones fallaron")
                    sys.exit(1)
                    
            elif arg in ['--info', '-i', 'info']:
                show_startup_info()
                print("‚ÑπÔ∏è Informaci√≥n mostrada. Use 'python main_caba.py' para iniciar la aplicaci√≥n.")
                sys.exit(0)
                
            else:
                print(f"‚ùå Argumento desconocido: {arg}")
                print("Use 'python main_caba.py --help' para ver opciones disponibles.")
                sys.exit(1)
        
        # Ejecutar aplicaci√≥n normal
        exit_code = main()
        sys.exit(exit_code)
        
    except Exception as e:
        print(f"‚ùå Error cr√≠tico en main: {e}")
        traceback.print_exc()
        try:
            input("Presione Enter para salir...")
        except:
            time.sleep(5)
        sys.exit(1)
