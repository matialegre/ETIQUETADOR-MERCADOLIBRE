#!/usr/bin/env python3
"""
üé® GUI SIMPLIFICADA CON IMAGEN DE FONDO
Versi√≥n que garantiza que la imagen de fondo funcione correctamente
"""

import tkinter as tk
from tkinter import ttk
import ttkbootstrap as tb
from ttkbootstrap.constants import *
import os
import sys

class GuiWithBackground(tb.Window):
    """GUI simplificada con imagen de fondo garantizada."""
    
    def __init__(self):
        super().__init__(title="üèîÔ∏è MUNDO OUTDOOR - Stock Picking", themename="darkly")
        self.geometry("1200x800")
        
        # Variables para mantener referencias de imagen
        self.bg_image = None
        self.bg_label = None
        self.bg_image_ref = None
        
        self.create_interface()
        
    def create_interface(self):
        """Crear la interfaz con imagen de fondo."""
        
        # Frame principal
        main_frame = tb.Frame(self, padding=10)
        main_frame.pack(fill=BOTH, expand=YES)
        
        # T√≠tulo
        title_label = tb.Label(main_frame, text="üèîÔ∏è MUNDO OUTDOOR - Sistema de Picking", 
                              font=('Arial', 20, 'bold'))
        title_label.pack(pady=10)
        
        # Botones superiores
        btn_frame = tb.Frame(main_frame)
        btn_frame.pack(fill=X, pady=10)
        
        tb.Button(btn_frame, text="üìÖ Cargar", bootstyle=PRIMARY).pack(side=LEFT, padx=5)
        tb.Button(btn_frame, text="üñ®Ô∏è Imprimir lista", bootstyle=SUCCESS).pack(side=LEFT, padx=5)
        tb.Button(btn_frame, text="üìä Historial", bootstyle=INFO).pack(side=LEFT, padx=5)
        
        # Frame para tabla con imagen de fondo
        table_frame = tb.Frame(main_frame, padding=10)
        table_frame.pack(fill=BOTH, expand=YES)
        
        # Configurar grid
        table_frame.grid_rowconfigure(0, weight=1)
        table_frame.grid_columnconfigure(0, weight=1)
        
        # CARGAR IMAGEN DE FONDO
        self.load_background_image(table_frame)
        
        # Crear Treeview con estilo semi-transparente
        self.create_treeview(table_frame)
        
        # Bot√≥n de pickear
        pick_frame = tb.Frame(main_frame)
        pick_frame.pack(fill=X, pady=10)
        
        pick_btn = tb.Button(pick_frame, text="üì¶ PICKEAR", bootstyle="success-outline", 
                            font=('Arial', 16, 'bold'))
        pick_btn.pack(pady=10)
        
        # Barra de progreso
        progress_frame = tb.Frame(main_frame)
        progress_frame.pack(fill=X, pady=5)
        
        tb.Label(progress_frame, text="Progreso del d√≠a: 0% (0/0)").pack(side=LEFT)
        tb.Progressbar(progress_frame, value=0, length=200).pack(side=RIGHT)
    
    def load_background_image(self, parent_frame):
        """Cargar imagen de fondo de forma robusta."""
        
        print("üîç Cargando imagen de fondo...")
        
        # Detectar si estamos en .exe o Python
        if getattr(sys, 'frozen', False):
            base_dir = os.path.dirname(sys.executable)
            temp_dir = getattr(sys, '_MEIPASS', base_dir)
        else:
            base_dir = os.path.dirname(os.path.abspath(__file__))
            temp_dir = base_dir
        
        # Buscar imagen
        possible_paths = [
            os.path.join(base_dir, "background.png"),
            os.path.join(base_dir, "background.jpg"),
            os.path.join(temp_dir, "background.png"),
            os.path.join(temp_dir, "background.jpg"),
            "background.png",
            "background.jpg",
            os.path.join("..", "background.png"),
            os.path.join("..", "background.jpg")
        ]
        
        bg_path = None
        for path in possible_paths:
            if os.path.exists(path):
                bg_path = path
                print(f"‚úÖ Imagen encontrada: {path}")
                break
        
        if not bg_path:
            print("‚ùå No se encontr√≥ imagen de fondo")
            # Crear fondo s√≥lido elegante
            self.bg_label = tk.Label(parent_frame, bg='#34495e', 
                                   text="üèîÔ∏è MUNDO OUTDOOR\n\nImagen de fondo no encontrada\nColoca 'background.png' en la carpeta del programa",
                                   fg='white', font=('Arial', 14), justify='center')
            self.bg_label.place(x=0, y=0, relwidth=1, relheight=1)
            self.bg_label.lower()
            return
        
        try:
            # Cargar con PIL
            from PIL import Image, ImageTk
            print(f"üìé Cargando imagen: {bg_path}")
            
            # Abrir imagen
            pil_image = Image.open(bg_path)
            original_size = pil_image.size
            print(f"üìé Tama√±o original: {original_size}")
            
            # Obtener tama√±o del frame
            self.update_idletasks()
            frame_width = max(parent_frame.winfo_width(), 1200)
            frame_height = max(parent_frame.winfo_height(), 600)
            print(f"üìé Redimensionando a: {frame_width}x{frame_height}")
            
            # Redimensionar
            pil_image = pil_image.resize((frame_width, frame_height), Image.Resampling.LANCZOS)
            
            # Aplicar transparencia
            pil_image = pil_image.convert("RGBA")
            alpha = pil_image.split()[-1]
            alpha = alpha.point(lambda p: int(p * 0.2))  # 20% opacidad m√°s sutil
            pil_image.putalpha(alpha)
            
            # Crear PhotoImage
            self.bg_image = ImageTk.PhotoImage(pil_image)
            
            # Crear label de fondo
            self.bg_label = tk.Label(parent_frame, image=self.bg_image, bg='#2c3e50')
            self.bg_label.place(x=0, y=0, relwidth=1, relheight=1)
            self.bg_label.lower()
            
            # CR√çTICO: Mantener m√∫ltiples referencias
            self.bg_image_ref = self.bg_image
            parent_frame.bg_image_ref = self.bg_image
            self.master.bg_image_ref = self.bg_image  # Referencia en ventana principal
            
            print("üéâ ¬°IMAGEN DE FONDO CARGADA EXITOSAMENTE!")
            
        except ImportError:
            print("‚ùå PIL no disponible, usando fondo s√≥lido")
            self.bg_label = tk.Label(parent_frame, bg='#34495e', 
                                   text="üèîÔ∏è MUNDO OUTDOOR\n\nInstala Pillow para imagen de fondo:\npip install Pillow",
                                   fg='white', font=('Arial', 12), justify='center')
            self.bg_label.place(x=0, y=0, relwidth=1, relheight=1)
            self.bg_label.lower()
            
        except Exception as e:
            print(f"‚ùå Error cargando imagen: {e}")
            self.bg_label = tk.Label(parent_frame, bg='#e74c3c', 
                                   text=f"‚ùå Error cargando imagen:\n{str(e)}",
                                   fg='white', font=('Arial', 10), justify='center')
            self.bg_label.place(x=0, y=0, relwidth=1, relheight=1)
            self.bg_label.lower()
    
    def create_treeview(self, parent_frame):
        """Crear Treeview con estilo semi-transparente."""
        
        # Configurar estilo
        style = ttk.Style()
        
        # Treeview semi-transparente
        style.configure("Background.Treeview",
                       background="#34495e",  # Fondo semi-transparente
                       fieldbackground="#34495e",
                       foreground="white",
                       font=('Arial', 12))
        
        style.configure("Background.Treeview.Heading",
                       background="#2c3e50",
                       foreground="white",
                       font=('Arial', 14, 'bold'),
                       relief="flat")
        
        style.map("Background.Treeview",
                 background=[("selected", "#3498db")],
                 foreground=[("selected", "white")])
        
        # Crear Treeview
        columns = ("nombre", "cant", "talle", "color")
        self.tree = ttk.Treeview(parent_frame, columns=columns, show="headings", 
                                height=15, style="Background.Treeview")
        
        # Configurar columnas
        self.tree.heading("nombre", text="Nombre del Art√≠culo")
        self.tree.heading("cant", text="Cant")
        self.tree.heading("talle", text="Talle")
        self.tree.heading("color", text="Color")
        
        self.tree.column("nombre", width=600, anchor="w")
        self.tree.column("cant", width=80, anchor="center")
        self.tree.column("talle", width=100, anchor="center")
        self.tree.column("color", width=120, anchor="center")
        
        # Agregar datos de ejemplo
        sample_data = [
            ("Zapatilla Nike Air Max 270", "1", "42", "Negro/Blanco"),
            ("Remera Adidas Originals", "2", "L", "Azul"),
            ("Pantal√≥n Deportivo Puma", "1", "M", "Gris"),
            ("Campera The North Face", "1", "XL", "Verde"),
            ("Zapatilla Converse All Star", "1", "39", "Rojo"),
        ]
        
        for data in sample_data:
            self.tree.insert("", "end", values=data)
        
        # Posicionar Treeview
        self.tree.grid(row=0, column=0, sticky='nsew', padx=5, pady=5)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(parent_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.grid(row=0, column=1, sticky='ns')

def main():
    """Funci√≥n principal."""
    try:
        print("üöÄ Iniciando GUI con imagen de fondo...")
        app = GuiWithBackground()
        print("‚úÖ GUI creada, iniciando mainloop...")
        app.mainloop()
        print("üëã GUI cerrada")
    except Exception as e:
        print(f"‚ùå Error en GUI: {e}")
        import traceback
        traceback.print_exc()
        input("Presiona Enter para salir...")

if __name__ == "__main__":
    main()
